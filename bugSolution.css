In some cases, avoiding `calc()` entirely and using alternative techniques like CSS grid or flexbox may be the simplest solution for complex layouts.  If you must use `calc()`, try to be as explicit and precise as possible with units, and carefully consider the order of operations.  Thorough testing across different browsers is important to identify inconsistencies early.

Here's an example of a revised approach that might handle these scenarios more reliably (depending on the specific use case):

```css
/* Instead of using percentages directly, consider using variables or pre-calculated values */
:root {
  --parent-width: 200px; /*  Or obtain this dynamically with JavaScript if needed */
}

.element {
  width: calc(var(--parent-width) * 0.5 - 10px); /* More explicit calculation */
}
```

Or use a more robust layout technique:

```css
.container {
  display: flex;
}

.element {
  flex-basis: calc(50% - 10px);
}
```
This approach leverages the flexbox layout, which may provide more reliable behavior and less sensitivity to rounding errors.  Again, careful consideration of your specific layout needs is crucial.